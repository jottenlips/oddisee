{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Oddy","useState","frames","setFrames","x","setX","y","setY","walking","setWalking","app","useApp","useKeyPress","rightPressed","leftPressed","downPressed","upPressed","useTick","useEffect","loader","add","load","_","resource","Object","keys","data","map","frame","Texture","from","length","animationSpeed","isPlaying","textures","anchor","App","width","height","options","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAgBMA,EAAO,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACVC,EADU,KACFC,EADE,OAGCF,mBAAS,GAHV,mBAGVG,EAHU,KAGPC,EAHO,OAICJ,mBAAS,GAJV,mBAIVK,EAJU,KAIPC,EAJO,OAKaN,oBAAS,GALtB,mBAKVO,EALU,KAKDC,EALC,KAMXC,EAAMC,mBANK,EAQMC,YAAY,cAA5BC,EARU,sBASKD,YAAY,aAA3BE,EATU,sBAUKF,YAAY,aAA3BG,EAVU,sBAWGH,YAAY,WAAzBI,EAXU,oBAwCjB,OA3BAC,mBAAQ,WACFH,GACFT,EAAKD,EAAI,GAEPS,GACFR,EAAKD,EAAI,GAEPW,GACFR,EAAKD,EAAI,GAEPU,GACFT,EAAKD,EAAI,GAEXG,EAAWI,GAAgBC,GAAeC,GAAeC,MAI3DE,qBAAU,WACRR,EAAIS,OAAOC,IAjCK,sBAiCYC,MAAK,SAACC,EAAGC,GACnCpB,EACEqB,OAAOC,KAAKF,EAnCA,sBAmCsBG,KAAKxB,QAAQyB,KAAI,SAACC,GAAD,OACjDC,IAAQC,KAAKF,YAIlB,IAEmB,IAAlB1B,EAAO6B,OACF,KAIP,kBAAC,YAAD,CAAW3B,EAAGA,EAAGE,EAAGA,GAClB,kBAAC,iBAAD,CACE0B,eAAgB,GAChBC,UAAWzB,EACX0B,SAAUhC,EACViC,OAAQ,OAYDC,EANH,kBACV,kBAAC,QAAD,CAAOC,MA5DgB,IA4DFC,OA5DO,IA4DSC,QAAS,CAAEC,gBAAiB,WAC/D,kBAAC,EAAD,QC9DgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2576b7ce.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Graphics, Point, Texture } from \"pixi.js\";\n\nimport {\n  Stage,\n  PixiComponent,\n  Container,\n  AnimatedSprite,\n  useApp,\n  useTick,\n} from \"@inlet/react-pixi\";\nimport { useKeyPress, useKeyPressEvent } from \"react-use\";\nimport { set } from \"ramda\";\nconst [width, height] = [500, 200];\nconst spritesheet = \"/sprites/oddy.json\";\n\nconst Oddy = () => {\n  const [frames, setFrames] = useState([]);\n  // const [rot, setRot] = useState(0);\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const [walking, setWalking] = useState(false);\n  const app = useApp();\n\n  const [rightPressed] = useKeyPress(\"ArrowRight\");\n  const [leftPressed] = useKeyPress(\"ArrowLeft\");\n  const [downPressed] = useKeyPress(\"ArrowDown\");\n  const [upPressed] = useKeyPress(\"ArrowUp\");\n\n  useTick(() => {\n    if (leftPressed) {\n      setX(x - 1);\n    }\n    if (rightPressed) {\n      setX(x + 1);\n    }\n    if (downPressed) {\n      setY(y + 1);\n    }\n    if (upPressed) {\n      setY(y - 1);\n    }\n    setWalking(rightPressed || leftPressed || downPressed || upPressed);\n  });\n\n  // load\n  useEffect(() => {\n    app.loader.add(spritesheet).load((_, resource) => {\n      setFrames(\n        Object.keys(resource[spritesheet].data.frames).map((frame) =>\n          Texture.from(frame)\n        )\n      );\n    });\n  }, []);\n\n  if (frames.length === 0) {\n    return null;\n  }\n\n  return (\n    <Container x={x} y={y}>\n      <AnimatedSprite\n        animationSpeed={0.5}\n        isPlaying={walking}\n        textures={frames}\n        anchor={0.5}\n      />\n    </Container>\n  );\n};\n\nconst App = () => (\n  <Stage width={width} height={height} options={{ backgroundColor: 0xffffff }}>\n    <Oddy />\n  </Stage>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}